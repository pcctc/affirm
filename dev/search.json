[{"path":"https://pcctc.github.io/affirm/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 affirm authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pcctc.github.io/affirm/dev/articles/getting-started.html","id":"validate-edc-data","dir":"Articles","previous_headings":"","what":"Validate EDC Data","title":"Getting Started","text":"Validating electronic data capture system data nuance different types validation, examples illustrate issues often arise EDC validation.","code":""},{"path":"https://pcctc.github.io/affirm/dev/articles/getting-started.html","id":"initiate","dir":"Articles","previous_headings":"Validate EDC Data","what":"Initiate","title":"Getting Started","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  # this option is used to auto-select columns that appear in the report listings  # (default are these IDs and the columns that appear in the condition being tested) options('affirm.id_cols' = \"SUBJECT\")"},{"path":"https://pcctc.github.io/affirm/dev/articles/getting-started.html","id":"affirm","dir":"Articles","previous_headings":"Validate EDC Data","what":"Affirm","title":"Getting Started","text":"Affirm missing subject IDs time ’ll affirm randomization assignment missing missing take action removing rows returned data frame. affirmation, merge data DM data set, check whether reported subject age aligns age group randomization stratification variable. example, modify data frame reported data management team. return rows data frame, include flag row bad inputs.","code":"affirm_true(   RAND,   label = \"RAND: Subject ID is not missing\",   condition = !is.na(SUBJECT),   id = 1L,   priority = 1,   data_frames = \"RAND\" ) #> • RAND: Subject ID is not missing #>   0 issues identified. #> # A tibble: 5 × 3 #>   SUBJECT RAND_GROUP RAND_STRATA #>     <dbl> <chr>      <chr>       #> 1       1 Drug A     <65yr       #> 2       2 Drug B     >=65yr      #> 3       3 Drug A     <65yr       #> 4       4 Drug B     >=65yr      #> 5       5 NA         >=65yr RAND <-   affirm_true(     RAND,     label = \"RAND: Randomization Group is not missing\",     condition = !is.na(RAND_GROUP),     data_action = filter(., !is.na(RAND_GROUP)),     id = 2L,     priority = 1,     data_frames = \"RAND\"   ) #> • RAND: Randomization Group is not missing #>   1 issue identified. RAND |>   left_join(     DM |> prepend_df_name() |> select(SUBJECT, DM.AGE) ,      by = \"SUBJECT\"   ) |>    affirm_true(     label = \"RAND: Randomization strata match recorded subject age\",     condition =       (RAND_STRATA %in% \"<65yr\" & DM.AGE < 65) | (RAND_STRATA %in% \">=65yr\" & DM.AGE >= 65),     id = 3L,     priority = 1,     data_frames = \"RAND, DM\"   ) #> • RAND: Randomization strata match recorded subject age #>   1 issue identified. #> # A tibble: 4 × 4 #>   SUBJECT RAND_GROUP RAND_STRATA DM.AGE #>     <dbl> <chr>      <chr>        <dbl> #> 1       1 Drug A     <65yr           40 #> 2       2 Drug B     >=65yr          70 #> 3       3 Drug A     <65yr           50 #> 4       4 Drug B     >=65yr          60 affirm_true(   DM,   label = \"DM: Subject race is one of 'Asian', 'Black or African American', 'Native Hawaiian or Other Pacific Islander', 'American Indian or Alaska Native', 'White'\",   condition = RACE %in% c('Asian', 'Black or African American', 'Native Hawaiian or Other Pacific Islander', 'American Indian or Alaska Native', 'White'),   report_listing =     select(., SUBJECT, RACE) |>      mutate(..flag.. = ifelse(!lgl_condition, label, NA)),   id = 4L,   data_frames = \"DM\" ) #> • DM: Subject race is one of 'Asian', 'Black or African American', 'Native #>   Hawaiian or Other Pacific Islander', 'American Indian or Alaska Native', #>   'White' #>   1 issue identified. #> # A tibble: 4 × 3 #>   SUBJECT   AGE RACE                                      #>     <dbl> <dbl> <chr>                                     #> 1       1    40 Asian                                     #> 2       2    70 Black or African American                 #> 3       3    50 Native American                           #> 4       4    60 Native Hawaiian or Other Pacific Islander  # we'll take a peak at the 'report_listing' data frame now affirm_report_raw_data() |>    filter(id == 4L) |>    pull(data) #> [[1]] #> # A tibble: 4 × 3 #>   SUBJECT RACE                                      ..flag..                     #>     <dbl> <chr>                                     <chr>                        #> 1       1 Asian                                     NA                           #> 2       2 Black or African American                 NA                           #> 3       3 Native American                           DM: Subject race is one of … #> 4       4 Native Hawaiian or Other Pacific Islander NA"},{"path":"https://pcctc.github.io/affirm/dev/articles/getting-started.html","id":"report","dir":"Articles","previous_headings":"Validate EDC Data","what":"Report","title":"Getting Started","text":"Get summary collection data affirmations gt table affirm_report_gt(). table includes","code":"affirm_report_gt()"},{"path":"https://pcctc.github.io/affirm/dev/articles/getting-started.html","id":"validate-derived-variables","dir":"Articles","previous_headings":"","what":"Validate Derived Variables","title":"Getting Started","text":"Using EDC data derive new variables requires different style data validations. validating raw EDC data, must report bad/inconsistent data data manager investigate correct data source data base. validating derived variables based raw EDC data, make assumptions data. Validations can used ensure whatever assumptions made day first derived new variable still met raw EDC data continues updated. example, imagine classifying tumor locations broader tumor region variable. first time write code, classify every location broader region, way know may entered new tumor location future. Therefore, can write validation location mapped region. location mapped, rather reporting data management team, may opt return error know new location needs handled. Return errors using affirm_true(error=TRUE) argument. error message reference affirmation label, making clear script erred. case, may want set following option top script derives analysis variables. Every newly derived variable associated multiple affirmations ensure derivation remains correct future.","code":"options(\"affirm.error\" = TRUE)"},{"path":"https://pcctc.github.io/affirm/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel D. Sjoberg. Author. Travis Gerke. Author. Shannon Pileggi. Author. PCCTC, LLC. Copyright holder, maintainer.","code":""},{"path":"https://pcctc.github.io/affirm/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sjoberg D, Gerke T, Pileggi S (2024). affirm: Secular affirmations data. R package version 0.2.0.9001,  https://pcctc.github.io/affirm/, https://github.com/pages/pcctc/affirm/.","code":"@Manual{,   title = {affirm: Secular affirmations against data},   author = {Daniel D. Sjoberg and Travis Gerke and Shannon Pileggi},   year = {2024},   note = {R package version 0.2.0.9001,  https://pcctc.github.io/affirm/},   url = {https://github.com/pages/pcctc/affirm/}, }"},{"path":"https://pcctc.github.io/affirm/dev/index.html","id":"affirm-","dir":"","previous_headings":"","what":"Secular affirmations against data","title":"Secular affirmations against data","text":"{affirm} package makes daily affirmation data. use package affirm raw data expected, derived variables continue accurate data updated. Raw EDC Data: Use affirmation functions make assertions raw EDC data. Report errors back data management, cases make ‘corrections’ data. issue still reported DM, small corrections let us continue work without dealing data present data base simplifies much logic downstream. Derived Variables: time derive new variable, use data affirmation functions affirm derivation continues accurate data updates. ’ll often use affirm_true(error=TRUE) setting, throws error underlying assumptions true require us address issue continuing. {pointblank} another package performs data validations. {pointblank} far comprehensive {affirm}, {affirm} utilizes many ideas reporting introduced {pointblank} defaults reports tailored needs PCCTC organization. {affirm} perfect match , {pointblank} likely meet validation needs!","code":""},{"path":"https://pcctc.github.io/affirm/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Secular affirmations against data","text":"Install recent release {affirm} Install development branch testing","code":"devtools::install_github(\"pcctc/affirm@*release\") devtools::install_github(\"pcctc/affirm\")"},{"path":"https://pcctc.github.io/affirm/dev/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Secular affirmations against data","text":"Load package initialize new affirmation session affirm_init() Run individual affirmations… Create report results","code":"library(affirm) #>  #> Attaching package: 'affirm' #> The following object is masked from 'package:stats': #>  #>     filter  # initiate an affirmation session affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations... as_tibble(mtcars) |>   affirm_true(     label = \"No. cylinders must be 4, 6, or 8\",     condition = cyl %in% c(4, 6, 8),     id = 1,     data_frames = \"mtcars\"   ) |>   affirm_true(     label = \"MPG should be less than 33\",     condition = mpg < 33,     id = 2,     data_frames = \"mtcars\"   ) #> • No. cylinders must be 4, 6, or 8 #>   0 issues identified. #> • MPG should be less than 33 #>   1 issue identified. #> # A tibble: 32 × 11 #>     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1  21       6   160   110  3.9   2.62  16.5     0     1     4     4 #> 2  21       6   160   110  3.9   2.88  17.0     0     1     4     4 #> 3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1 #> # ℹ 29 more rows affirm_report_gt()"},{"path":"https://pcctc.github.io/affirm/dev/index.html","id":"about-the-hex-logo","dir":"","previous_headings":"Examples","what":"About the hex logo","title":"Secular affirmations against data","text":"hex art depiction Plato’s allegory cave. data table ideal form, {affirm} package help us confirm viewing . Also, “forms”…get ? 😜","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/DM.html","id":null,"dir":"Reference","previous_headings":"","what":"Subject Demographics — DM","title":"Subject Demographics — DM","text":"data set containing demographics enrolled subjects trial.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/DM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subject Demographics — DM","text":"","code":"DM"},{"path":"https://pcctc.github.io/affirm/dev/reference/DM.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subject Demographics — DM","text":"data frame SUBJECT Subject ID AGE Age Randomization RACE Race","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/RAND.html","id":null,"dir":"Reference","previous_headings":"","what":"Subject Randomization — RAND","title":"Subject Randomization — RAND","text":"data set containing randomization assignment trial.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/RAND.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subject Randomization — RAND","text":"","code":"RAND"},{"path":"https://pcctc.github.io/affirm/dev/reference/RAND.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Subject Randomization — RAND","text":"data frame SUBJECT Subject ID RAND_GROUP Randomization Assignment RAND_STRATA Randomization Strata Value","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm-package.html","id":null,"dir":"Reference","previous_headings":"","what":"affirm: Secular affirmations against data — affirm-package","title":"affirm: Secular affirmations against data — affirm-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"affirm: Secular affirmations against data — affirm-package","text":"Maintainer: PCCTC, LLC zzPDL_PCCTC_Data_Science@mskcc.org [copyright holder] Authors: Daniel D. Sjoberg danield.sjoberg@gmail.com (ORCID) Travis Gerke tgerke@mail.harvard.edu (ORCID) Shannon Pileggi shannon.pileggi@gmail.com (ORCID)","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_false.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirm False — affirm_false","title":"Affirm False — affirm_false","text":"wrapper affirm_true(). condition argument process passed affirm_true(condition = !condition)","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_false.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirm False — affirm_false","text":"","code":"affirm_false(   data,   label,   condition,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   columns = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_false.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirm False — affirm_false","text":"data data frame label string used describe affirmation condition expression check evaluates logical vector, e.g. cyl %% c(4, 6, 8). Use dot (.) reference passed data frame. condition results missing value, interpreted FALSE. id, priority, data_frames, columns Optional additional information passed affirmation report. id must integer, e.g. id = 1L priority must integer, e.g. priority = 1L data_frames string data frame names used affirmation, e.g. data_frames = \"RAND, DM\" columns string column names used affirmation. default .vars(condition) report_listing expression selecting/filtering rows data= return issue listing report. default return result create_report_listing(), rows met condition= columns included condition= expression along columns set option('affirm.id_cols'). 'affirm.id_cols' option must character vector column names, columns selected dplyr::select(any_of(getOption('affirm.id_cols'))). data_action expression executed end function call supplied. Default NULL, passed data frame data= returned unaltered. Perhaps need remove problematic rows: data_action = dplyr::filter(., !(!!condition)) error Logical indicating whether throw error condition met. Default FALSE.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_false.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirm False — affirm_false","text":"data frame","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_false.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirm False — affirm_false","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  dplyr::as_tibble(mtcars) |>  affirm_false(    label = \"No. cylinders must be 4, 6, or 8\",    condition = !cyl %in% c(4, 6, 8)  ) #> • No. cylinders must be 4, 6, or 8 #>   0 issues identified. #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Begin Affirmations — affirm_init","title":"Begin Affirmations — affirm_init","text":"Run function initialize new affirmation report","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Begin Affirmations — affirm_init","text":"","code":"affirm_init(replace = NA)  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Begin Affirmations — affirm_init","text":"replace logical indicating whether replace/delete existing -progress affirmation report. Default NA, user interactively asked whether replace report exists.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Begin Affirmations — affirm_init","text":"","code":"affirm_init() #> ✔ We're ready to make data affirmations...  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirm Class — affirm_na","title":"Affirm Class — affirm_na","text":"wrapper affirm_true(). Reports columns inherit class, e.g. dplyr::select(data, all_of(columns) && (\\(x) !inherits(x, class))) wrapper affirm_true(). Reports columns whose names end \".x\" \".y\", indicating sloppy merge. wrapper affirm_true(). columns argument used construct affirm_true(condition = .na(column)) argument.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirm Class — affirm_na","text":"","code":"affirm_class(   data,   label,   columns,   class,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )  affirm_clean_join(   data,   label,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )  affirm_na(   data,   label,   column,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )  affirm_not_na(   data,   label,   column,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirm Class — affirm_na","text":"data data frame label string used describe affirmation columns columns check class class character class affirm id, priority, data_frames Optional additional information passed affirmation report. id must integer, e.g. id = 1L priority must integer, e.g. priority = 1L data_frames string data frame names used affirmation, e.g. data_frames = \"RAND, DM\" report_listing expression selecting/filtering rows data= return issue listing report. default return result create_report_listing(), rows met condition= columns included condition= expression along columns set option('affirm.id_cols'). 'affirm.id_cols' option must character vector column names, columns selected dplyr::select(any_of(getOption('affirm.id_cols'))). data_action expression executed end function call supplied. Default NULL, passed data frame data= returned unaltered. Perhaps need remove problematic rows: data_action = dplyr::filter(., !(!!condition)) error Logical indicating whether throw error condition met. Default FALSE. column column check NA values ","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirm Class — affirm_na","text":"data frame data frame data frame","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirm Class — affirm_na","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  affirm_class(   dplyr::as_tibble(iris),   label = \"all cols are numeric (but Species really isn't)\",   columns = everything(),   class = \"numeric\" ) #> • all cols are numeric (but Species really isn't) #>   1 issue identified. #> # A tibble: 150 × 5 #>    Sepal.Length Sepal.Width Petal.Length Petal.Width Species #>           <dbl>       <dbl>        <dbl>       <dbl> <fct>   #>  1          5.1         3.5          1.4         0.2 setosa  #>  2          4.9         3            1.4         0.2 setosa  #>  3          4.7         3.2          1.3         0.2 setosa  #>  4          4.6         3.1          1.5         0.2 setosa  #>  5          5           3.6          1.4         0.2 setosa  #>  6          5.4         3.9          1.7         0.4 setosa  #>  7          4.6         3.4          1.4         0.3 setosa  #>  8          5           3.4          1.5         0.2 setosa  #>  9          4.4         2.9          1.4         0.2 setosa  #> 10          4.9         3.1          1.5         0.1 setosa  #> # ℹ 140 more rows  affirm_close() affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  df <-   dplyr::tibble(lgl = c(NA, TRUE, NA, FALSE, NA)) |>   dplyr::mutate(id = dplyr::row_number())  affirm_clean_join(   dplyr::full_join(df, df, by = \"id\"),   label = \"Checking for clean merge\" ) #> • Checking for clean merge #>   1 issue identified. #> # A tibble: 5 × 3 #>   lgl.x    id lgl.y #>   <lgl> <int> <lgl> #> 1 NA        1 NA    #> 2 TRUE      2 TRUE  #> 3 NA        3 NA    #> 4 FALSE     4 FALSE #> 5 NA        5 NA     affirm_close() affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations..."},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_no_dupes.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirm Range — affirm_no_dupes","title":"Affirm Range — affirm_no_dupes","text":"wrapper affirm_true(). columns argument used construct affirm_true(condition = dplyr::select(., all_of(columns)) |> duplicated()) argument.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_no_dupes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirm Range — affirm_no_dupes","text":"","code":"affirm_no_dupes(   data,   label,   columns,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_no_dupes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirm Range — affirm_no_dupes","text":"data data frame label string used describe affirmation columns columns check duplicates among id, priority, data_frames Optional additional information passed affirmation report. id must integer, e.g. id = 1L priority must integer, e.g. priority = 1L data_frames string data frame names used affirmation, e.g. data_frames = \"RAND, DM\" report_listing expression selecting/filtering rows data= return issue listing report. default return result create_report_listing(), rows met condition= columns included condition= expression along columns set option('affirm.id_cols'). 'affirm.id_cols' option must character vector column names, columns selected dplyr::select(any_of(getOption('affirm.id_cols'))). data_action expression executed end function call supplied. Default NULL, passed data frame data= returned unaltered. Perhaps need remove problematic rows: data_action = dplyr::filter(., !(!!condition)) error Logical indicating whether throw error condition met. Default FALSE.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_no_dupes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirm Range — affirm_no_dupes","text":"data frame","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_no_dupes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirm Range — affirm_no_dupes","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  dplyr::as_tibble(mtcars) |>  affirm_no_dupes(    label = \"No duplicates in the number of cylinders\",    columns = cyl  ) #> • No duplicates in the number of cylinders #>   29 issues identified. #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirm Range — affirm_range","title":"Affirm Range — affirm_range","text":"wrapper affirm_true(). column, range, boundaries arguments used construct affirm_true(condition = column >= range[1] & column <= range[2]) argument.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirm Range — affirm_range","text":"","code":"affirm_range(   data,   label,   column,   range,   boundaries = c(TRUE, TRUE),   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirm Range — affirm_range","text":"data data frame label string used describe affirmation column single column check values range vector length two indicating upper lower bounds range. class range must compatible column, e.g. column numeric, range must also numeric; column date, range must date; column integer, range must integer, etc. boundaries logical vector length 2 indicating whether include UB LB range check. Default c(TRUE, TRUE) id, priority, data_frames Optional additional information passed affirmation report. id must integer, e.g. id = 1L priority must integer, e.g. priority = 1L data_frames string data frame names used affirmation, e.g. data_frames = \"RAND, DM\" report_listing expression selecting/filtering rows data= return issue listing report. default return result create_report_listing(), rows met condition= columns included condition= expression along columns set option('affirm.id_cols'). 'affirm.id_cols' option must character vector column names, columns selected dplyr::select(any_of(getOption('affirm.id_cols'))). data_action expression executed end function call supplied. Default NULL, passed data frame data= returned unaltered. Perhaps need remove problematic rows: data_action = dplyr::filter(., !(!!condition)) error Logical indicating whether throw error condition met. Default FALSE.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirm Range — affirm_range","text":"data frame","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_range.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirm Range — affirm_range","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  dplyr::as_tibble(mtcars) |>  affirm_range(    label = \"MPG is >0 and <=30\",    column = mpg,    range = c(0, 30),    boundaries = c(FALSE, TRUE)  ) #> • MPG is >0 and <=30 #>   4 issues identified. #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirmation Report — affirm_report","title":"Affirmation Report — affirm_report","text":"affirm_report_gt() returns styled gt table summarizing results affirmation session. affirm_report_excel() returns excel file one sheet per affirmation (excluding errors) affirm_report_raw_data() returns raw data used generate summary affirm_report_gt()","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirmation Report — affirm_report","text":"","code":"affirm_report_gt()  affirm_report_excel(   file,   affirmation_name = \"{data_frames}{id}\",   overwrite = TRUE )  affirm_report_raw_data()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirmation Report — affirm_report","text":"file file path save xlsx file affirmation_name string affirmation names; item name curly brackets replaced item value (see glue::glue). Item names accepted include: id, label, priority, data_frames, columns, error_n, total_n. Defaults \"{data_frames}{id}\". overwrite Overwrite existing file (Defaults TRUE write.table)","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirmation Report — affirm_report","text":"gt table","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirmation Report — affirm_report","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  dplyr::as_tibble(mtcars) |>  affirm_true(    label = \"No. cylinders must be 4, 6, or 8\",    condition = cyl %in% c(4, 6, 8)  ) |>  affirm_true(     label = \"MPG should be less than 33\",     condition = mpg < 33  ) #> • No. cylinders must be 4, 6, or 8 #>   0 issues identified. #> • MPG should be less than 33 #>   1 issue identified. #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  gt_report <- affirm_report_gt()  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_true.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirm True — affirm_true","title":"Affirm True — affirm_true","text":"Use function affirm expression true.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_true.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirm True — affirm_true","text":"","code":"affirm_true(   data,   label,   condition,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   columns = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_true.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirm True — affirm_true","text":"data data frame label string used describe affirmation condition expression check evaluates logical vector, e.g. cyl %% c(4, 6, 8). Use dot (.) reference passed data frame. condition results missing value, interpreted FALSE. id, priority, data_frames, columns Optional additional information passed affirmation report. id must integer, e.g. id = 1L priority must integer, e.g. priority = 1L data_frames string data frame names used affirmation, e.g. data_frames = \"RAND, DM\" columns string column names used affirmation. default .vars(condition) report_listing expression selecting/filtering rows data= return issue listing report. default return result create_report_listing(), rows met condition= columns included condition= expression along columns set option('affirm.id_cols'). 'affirm.id_cols' option must character vector column names, columns selected dplyr::select(any_of(getOption('affirm.id_cols'))). data_action expression executed end function call supplied. Default NULL, passed data frame data= returned unaltered. Perhaps need remove problematic rows: data_action = dplyr::filter(., !(!!condition)) error Logical indicating whether throw error condition met. Default FALSE.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_true.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirm True — affirm_true","text":"data frame","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_true.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Affirm True — affirm_true","text":"passing expressions arguments report_listing= data_action=, things keep mind. expression passed condition= can used, note captured expression inside function. means use , need use !! (bang-bang) pass inside function. addition able use condition= expression, can simplify code somewhat referring lgl_condition, evaluated logical vector condition= expression.","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_true.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirm True — affirm_true","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  dplyr::as_tibble(mtcars) |>  affirm_true(    label = \"No. cylinders must be 4, 6, or 8\",    condition = cyl %in% c(4, 6, 8)  ) #> • No. cylinders must be 4, 6, or 8 #>   0 issues identified. #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Affirm Values — affirm_values","title":"Affirm Values — affirm_values","text":"wrapper affirm_true(). column value arguments used construct affirm_true(condition = column %% value) argument.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Affirm Values — affirm_values","text":"","code":"affirm_values(   data,   label,   column,   values,   id = NA_integer_,   priority = NA_integer_,   data_frames = NA_character_,   report_listing = NULL,   data_action = NULL,   error = getOption(\"affirm.error\", default = FALSE) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Affirm Values — affirm_values","text":"data data frame label string used describe affirmation column single column check values values vector values column= may take id, priority, data_frames Optional additional information passed affirmation report. id must integer, e.g. id = 1L priority must integer, e.g. priority = 1L data_frames string data frame names used affirmation, e.g. data_frames = \"RAND, DM\" report_listing expression selecting/filtering rows data= return issue listing report. default return result create_report_listing(), rows met condition= columns included condition= expression along columns set option('affirm.id_cols'). 'affirm.id_cols' option must character vector column names, columns selected dplyr::select(any_of(getOption('affirm.id_cols'))). data_action expression executed end function call supplied. Default NULL, passed data frame data= returned unaltered. Perhaps need remove problematic rows: data_action = dplyr::filter(., !(!!condition)) error Logical indicating whether throw error condition met. Default FALSE.","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Affirm Values — affirm_values","text":"data frame","code":""},{"path":[]},{"path":"https://pcctc.github.io/affirm/dev/reference/affirm_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Affirm Values — affirm_values","text":"","code":"affirm_init(replace = TRUE) #> ✔ We're ready to make data affirmations...  dplyr::as_tibble(mtcars) |>  affirm_values(    label = \"No. cylinders must be 4, 6, or 8\",    column = cyl,    values = c(4, 6, 8)  ) #> • No. cylinders must be 4, 6, or 8 #>   0 issues identified. #> # A tibble: 32 × 11 #>      mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1  21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3  22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6  18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7  14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8  24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9  22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10  19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows  affirm_close()"},{"path":"https://pcctc.github.io/affirm/dev/reference/prepend_df_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepend DF Name to Column Names — prepend_df_name","title":"Prepend DF Name to Column Names — prepend_df_name","text":"Prepend DF Name Column Names","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/prepend_df_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepend DF Name to Column Names — prepend_df_name","text":"","code":"prepend_df_name(   data,   df_name = NULL,   include = c(everything(), -any_of(getOption(\"affirm.id_cols\"))) )"},{"path":"https://pcctc.github.io/affirm/dev/reference/prepend_df_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepend DF Name to Column Names — prepend_df_name","text":"data data frame df_name string indicating data frame name prepend column names. supplied, function try identify data frame name. NOTE: can get correct name data frame piped directly function without piped function . include tidyselect expression identify columns modify name. Default columns, except identified options(\"affirm.id_cols\").","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/prepend_df_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepend DF Name to Column Names — prepend_df_name","text":"data frame","code":""},{"path":"https://pcctc.github.io/affirm/dev/reference/prepend_df_name.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepend DF Name to Column Names — prepend_df_name","text":"","code":"DM |>  prepend_df_name() #> # A tibble: 4 × 3 #>   DM.SUBJECT DM.AGE DM.RACE                                   #>        <dbl>  <dbl> <chr>                                     #> 1          1     40 Asian                                     #> 2          2     70 Black or African American                 #> 3          3     50 Native American                           #> 4          4     60 Native Hawaiian or Other Pacific Islander"},{"path":"https://pcctc.github.io/affirm/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>%, all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with rlang .data, .env, expr","code":""},{"path":"https://pcctc.github.io/affirm/dev/news/index.html","id":"affirm-development-version","dir":"Changelog","previous_headings":"","what":"affirm (development version)","title":"affirm (development version)","text":"Update affirm_excel_report() allow affirmations error_rate 0 print summary tab Excel report output. corresponding affirmation tab also produced displays standard header zero rows data. Export utility functions affirm_excel_report(). Update affirm_excel_report() depend openxlsx2; now contains front summary sheet specific formatting individual affirmation sheets. Remove variable labels arguments corresponding helper functions. Allow glue syntax excel report sheet names. errors found, return data frame zero rows instead NULL. longer re-exporting tibble(), as_tibble(), filter(), select(), mutate() {dplyr}. Added affirm_clean_join() function check column names don’t end \".x\" \".y\".","code":""},{"path":"https://pcctc.github.io/affirm/dev/news/index.html","id":"affirm-020","dir":"Changelog","previous_headings":"","what":"affirm 0.2.0","title":"affirm 0.2.0","text":"Changed function name affirm_export_excel() affirm_report_excel(). Added variable_labels= argument affirm_report_raw_data(), affirm_report_gt() affirm_report_excel(), adds row top variable labels output. (#4) Added affirm_class() function check column classes. Added affirm_na() affirm_not_na() functions check NA values. Added affirm_no_dupes() function check duplicate rows. Added affirm_range() function check ranges numeric, date, types columns. Added affirm_false() function check conditions expected false. Updated package internals use quosures instead expressions proper environment handling. (#5)","code":""},{"path":"https://pcctc.github.io/affirm/dev/news/index.html","id":"affirm-010","dir":"Changelog","previous_headings":"","what":"affirm 0.1.0","title":"affirm 0.1.0","text":"First release.","code":""}]
